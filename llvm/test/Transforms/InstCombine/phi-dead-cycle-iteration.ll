; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instcombine -S -instcombine-infinite-loop-threshold=2 | FileCheck %s

; Ensure that dead PHI cycles are removed in the same iteration (hence why this
; test sets the loop threshold to 2)
define void @f() {
; CHECK-LABEL: @f(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[A:%.*]]
; CHECK:       a:
; CHECK-NEXT:    br i1 false, label [[A]], label [[B:%.*]]
; CHECK:       b:
; CHECK-NEXT:    br label [[B]]
;
entry:
  br label %a
a:
  %phi.a = phi i32 [ 0, %entry ], [ %x, %a ]
  %x = add i32 %phi.a, 1
  br i1 false, label %a, label %b
b:
  %phi.b = phi i32 [ %x, %a ], [ %y, %b ]
  %y = add i32 %phi.b, 1
  br label %b
}

; Ensure the dead cycle is still detected when a phi node has multiple uses
define void @multipleUses() {
; CHECK-LABEL: @multipleUses(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[A:%.*]]
; CHECK:       a:
; CHECK-NEXT:    br i1 false, label [[A]], label [[B:%.*]]
; CHECK:       b:
; CHECK-NEXT:    br label [[B]]
;
entry:
  br label %a
a:
  %phi.a = phi i32 [ 0, %entry ], [ %z, %a ]
  %x = add i32 %phi.a, 1
  %y = add i32 %phi.a, 2
  %z = add i32 %x, %y
  br i1 false, label %a, label %b
b:
  %phi.b = phi i32 [ %x, %a ], [ %c, %b ]
  %c = add i32 %phi.b, 1
  br label %b
}
